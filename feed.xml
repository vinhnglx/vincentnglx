<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VincentNguyen</title>
  <subtitle>Code to change!</subtitle>
  <id>http://vincent.com</id>
  <link href="http://vincent.com"/>
  <link href="http://vincent.com/feed.xml" rel="self"/>
  <updated>2017-08-26T10:48:00+08:00</updated>
  <author>
    <name>Vincent</name>
  </author>
  <entry>
    <title>Ecto</title>
    <link rel="alternate" href="http://vincent.com/2017/08/26/ecto/"/>
    <id>http://vincent.com/2017/08/26/ecto/</id>
    <published>2017-08-26T10:48:00+08:00</published>
    <updated>2017-08-26T12:33:23+08:00</updated>
    <author>
      <name>Vincent</name>
    </author>
    <summary type="html">&lt;p&gt;When I start to learn and work on Elixir, I really impressive about Ecto.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ecto is a database wrapper and language integrated query for Elixir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My personal feeling is Ecto is not magically like ActiveRecord. For example, Ecto doesn't support Lazy...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When I start to learn and work on Elixir, I really impressive about Ecto.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ecto is a database wrapper and language integrated query for Elixir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My personal feeling is Ecto is not magically like ActiveRecord. For example, Ecto doesn't support Lazy-Load, you need to allow data
to be preloaded into structs. Lazy loading is often a source of confusion and performance issues and Ecto pushes developers to do the proper thing. Sound good, huh?&lt;/p&gt;

&lt;p&gt;Ecto also supports a mechanism to help you organize the schema across multiple contexts - break a large schema into smaller ones. Maybe one for reading data,
another for writing. Or one for your database, another for your forms.&lt;/p&gt;

&lt;p&gt;And did you know the Plataformatec? They wrote a cool &lt;a href="http://pages.plataformatec.com.br/ebook-whats-new-in-ecto-2-0"&gt;free Ecto ebook&lt;/a&gt; and the book will be updated frequently when Ecto release new version.&lt;/p&gt;

&lt;p&gt;After few days reading the book below is my summary and of course, from the book, I also had few things don't completely understand. I will deep dive it again in this September.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;ORM - O is for Objects. Objects couple state and behavior together. For example, in the &lt;code&gt;product&lt;/code&gt; object, we have state named &lt;code&gt;price&lt;/code&gt; and behavior named &lt;code&gt;purchased?&lt;/code&gt;.
And with Ruby programming language, the code will be: &lt;code&gt;product.price&lt;/code&gt; and &lt;code&gt;product.purchased?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But Elixir fails the "coupling of state and behavior". Behavior in Elixir is always added to modules via functions. Elixir provides structs to help us work with
structured data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    defmodule Product do
    defstruct [:price, :title]

    def purchased?(product) do
      # Do Sth
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call will be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    product = Product.new(title: "iPhone 8", price: 1000)
  product.price

  Product.purchased?(product)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ORM - RM is Relational Mapper. Ecto provides schemas that map any data source into an Elixir struct. &lt;em&gt;When applied to your database, Ecto schemas are relational mapper&lt;/em&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  defmodule Sample.Type do
  use Sample.Web, :model

  schema "types" do
    field :name, :string
    field :desc, :string
    field :slug, :string
    has_many :quotes, Sample.Quote

    timestamps()
  end
end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you see, the schema &lt;code&gt;types&lt;/code&gt; is the place you provide information for fields and set relationship to another model.&lt;/p&gt;

&lt;p&gt;And a schema may be end-up with hundreds of fields, relationships - this is a very bad schema. Therefore, it's better to break schema across multiple contexts, this would lead to simpler and clearer solutions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Most queries in Ecto are written using schemas. And Ecto 2.0 adds many improvements to schemaless queries - allowing all database operations to be expressed without a schema. They tend to simple queries.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ecto supports test factories and we don't need to use a 3-party library for creating factories.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ecto has dynamic queries, allow us to build dynamic expressions that are later interpolated into the query. This feature is quite cool, and I noted here. Will come back to deep dive.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ecto introduces the ability to run queries in different prefixes. Data in different prefixes are isolated. This is really fit when you build multi-tenant application. &lt;strong&gt;One more note to deep dive.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ecto also includes &lt;code&gt;many_to_many&lt;/code&gt; relationships - &lt;strong&gt;I'm sure will take a look about this in my current side project.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last two things about transaction with Ecto.Multi and Concurrent test with SQL Sandbox - &lt;strong&gt;I will deep dive when I face these problems&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>Chapter 1 - 99 bottles of OOP</title>
    <link rel="alternate" href="http://vincent.com/2017/06/19/chapter-1-99-bottles-oop/"/>
    <id>http://vincent.com/2017/06/19/chapter-1-99-bottles-oop/</id>
    <published>2017-06-19T16:33:00+08:00</published>
    <updated>2017-06-19T16:53:44+08:00</updated>
    <author>
      <name>Vincent</name>
    </author>
    <summary type="html">&lt;h2 id="chapter-1-rediscover-simplicity"&gt;Chapter 1: Rediscover Simplicity&lt;/h2&gt;

&lt;p&gt;In the chapter 1, the author has introduced four ways to solve a problem named &lt;a href="https://en.wikipedia.org/wiki/99_Bottles_of_Beer"&gt;99 bottles&lt;/a&gt;.
Basically, the problem is not difficult but it has many cases - these four ways that author shared are common ways to solve...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 id="chapter-1-rediscover-simplicity"&gt;Chapter 1: Rediscover Simplicity&lt;/h2&gt;

&lt;p&gt;In the chapter 1, the author has introduced four ways to solve a problem named &lt;a href="https://en.wikipedia.org/wiki/99_Bottles_of_Beer"&gt;99 bottles&lt;/a&gt;.
Basically, the problem is not difficult but it has many cases - these four ways that author shared are common ways to solve this problem.&lt;/p&gt;

&lt;p&gt;Below are my notes after finished chapter 1.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All we knows: most code will someday change, therefor where you optimized code for understandability, you now focus on its changeability. Your code is less
concrete but more abstract - you've made it initially harder to understand in hopes that it will ultimately be easier to maintain. This is the basic promise of
OOD. &lt;strong&gt;Design decisions inevitably involve trade-offs. There's always a cost.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, almost we know about principles to refactor the code such as DRY or Single Responsibility. DRY and Single Responsibility are great ideas, but that
doesn't mean it's free. Extract methods to many small methods to make sure single repsonsible for each method, or extract the duplication into a single
common method then invoke this method in place of the old code, the price you pay for these ways is that the invoker of new method no longer knows the result,
only the message it should send.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Each of these design choices has costs, and it only makes sense to pay these costs if you also accure some offsetting benefits. So &lt;strong&gt;picking the right
abstractions is an important thing need to remember when design&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are two goals that the code should meet often: &lt;strong&gt;Concrete enough&lt;/strong&gt; to be understood while simutaneously being &lt;strong&gt;abstract enough&lt;/strong&gt; to allow for change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The difference between Message and Method:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A "method" is defined on an object and contains behavior. Methods are defined.&lt;/li&gt;
      &lt;li&gt;A "message" is sent by an object to invoke behavior. Messages are sent.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For example&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  def call(user_auth_token)
    uri = URI('https://graph.facebook.com/debug_token')
    params = { input_token: user_auth_token, access_token: @access_token }
    uri.query = URI.encode_www_form(params)
    res = Net::HTTP.get_response(uri)
    if res.body
      hash_data = JSON.parse(res.body)
      if !(hash_data["data"].nil? || hash_data["data"]["is_valid"].nil?)
        return hash_data["data"]["is_valid"]
      end
    end
    return false
  end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The example above proves one thing: combining many ideas into a small section of codes make it difficult to isolate and name any single concept.
This example named &lt;code&gt;call&lt;/code&gt;, uses a facebook authentication token, verify it before get facebook user information. You see, three missions in a method named &lt;code&gt;call&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hence, code clarity is built upon names. Writing code is like writing a book, your efforts are for other readers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The author gives to us three questions to figure about value and cost before judge a code.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How difficult was it to write?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How hard is it to understand?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How expensive will it be to change?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first question is a memory, the last question is imaginary but the second question is true right now, always applies.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In chapter 1, the author also talked about naming method. I used to refactor code by extract large methods to many small methods, and I always got the trouble
when set new names for methods. The trouble will occur when I change the code to fit with new requirement - I can never change the internal implementation without
ruining the method name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefor, the author said:  &lt;strong&gt;You should name methods NOT after what they do, but after what they mean&lt;/strong&gt;. You should name methods after the concept they represent.&lt;/p&gt;

&lt;p&gt;That's all about chapter 1.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Vội vàng</title>
    <link rel="alternate" href="http://vincent.com/2017/06/10/voi-vang/"/>
    <id>http://vincent.com/2017/06/10/voi-vang/</id>
    <published>2017-06-10T17:16:00+08:00</published>
    <updated>2017-06-10T17:31:22+08:00</updated>
    <author>
      <name>Vincent</name>
    </author>
    <summary type="html">&lt;p&gt;Tôi viết bài này chỉ là tự nhắc nhở bản thân mình và một người khác phải luôn vội vàng mà sống. Con người khác động vật ở
chỗ con người biết ước mơ. Có điều  ước mơ thì nhiều nhưng cuộc đời con người nó lại ngắn. Chỉ sống được có vài chục năm trên...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Tôi viết bài này chỉ là tự nhắc nhở bản thân mình và một người khác phải luôn vội vàng mà sống. Con người khác động vật ở
chỗ con người biết ước mơ. Có điều  ước mơ thì nhiều nhưng cuộc đời con người nó lại ngắn. Chỉ sống được có vài chục năm trên đời,
có sống trường sinh được đâu. Cho nên, ta chỉ có thể chọn ra trong những mơ ước nào là quan trọng trong cuộc đời để thực hiện
cho bằng được - hoặc 1 phần nào đó - và rồi chết.&lt;/p&gt;

&lt;p&gt;Phải sống bằng năng lượng tích cực, cuộc đời vốn ngắn, ai biết được những biến cố gì sẽ xảy ra. Cho nên hãy luôn vội vàng.
Suy nghĩ tiêu cực, lo chuyện bao đồng chỉ hại bản thân ta mà thôi.&lt;/p&gt;

&lt;p&gt;Ta phải sống như chưa từng được sống, như thể đây là cơ hội cuối cùng cho bản thân có thể làm gì đó.&lt;/p&gt;

&lt;p&gt;Tóm lại, phải có ước mơ và phải sống vội vàng.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Few things quite simple but need to keep remember</title>
    <link rel="alternate" href="http://vincent.com/2017/06/03/basic-but-need-to-keep-remember/"/>
    <id>http://vincent.com/2017/06/03/basic-but-need-to-keep-remember/</id>
    <published>2017-06-03T19:47:00+08:00</published>
    <updated>2017-06-03T22:17:36+08:00</updated>
    <author>
      <name>Vincent</name>
    </author>
    <summary type="html">&lt;p&gt;Yo! I came back after 2 months. This post is my note after read a &lt;a href="https://blog.codeship.com/refactoring-and-design-patterns/"&gt;news&lt;/a&gt; from CodeShip.&lt;/p&gt;

&lt;p&gt;From wiki:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code refactoring is the process of restructuring existing computer code without changing its external behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="why-refactor-your-code"&gt;Why Refactor Your Code&lt;/h3&gt;

&lt;p&gt;I still...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Yo! I came back after 2 months. This post is my note after read a &lt;a href="https://blog.codeship.com/refactoring-and-design-patterns/"&gt;news&lt;/a&gt; from CodeShip.&lt;/p&gt;

&lt;p&gt;From wiki:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code refactoring is the process of restructuring existing computer code without changing its external behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="why-refactor-your-code"&gt;Why Refactor Your Code&lt;/h3&gt;

&lt;p&gt;I still think, in the first 2 working years, refactoring is something that I will start to refactor after finish a project.
And of course, after finished the project, I forgot my promise - always.&lt;/p&gt;

&lt;p&gt;Until a day, when I faced to senior developers from a different country, they came to Vietnam to work with my team.
I felt very bad, I can't work with them. I saw a big wall, I need to get out of comfortable zone to survive.&lt;/p&gt;

&lt;p&gt;I started to re-learn everything about programming, up to now, I still learning .. haha … Learning is never stop.&lt;/p&gt;

&lt;p&gt;Alright! Back to the topic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Anyone can write code that computer can understand. And &lt;strong&gt;only good programmer can write code that human can understand&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Refactoring will help the code more readable, performance improvements. Refactoring code doesn't change behavior or output.&lt;/p&gt;

&lt;p&gt;In programming, there is a software development process called TDD: requirements are turned into very specific test cases, then
the software is improved to pass new tests, only. There are three phases in TDD:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Add a test. Each new feature begins with writing a test. To write a test, the developer must clearly understand the feature's specfication and requirements.
After that, run the test to see the test fails. If you skip this step, you may end up with a dead code - missing requirement. This phase is &lt;strong&gt;RED&lt;/strong&gt; phase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write the code. Only write some code that causes the test to pass. This phase is &lt;strong&gt;GREEN&lt;/strong&gt; phase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tests are passed, the developer can be confident that the new code meets the test requirements and doesn't break or degrade any existing features.
Next, this is the step that you will apply learned knowledge of good code practices and make small adjustment without changing the codes behavior.
New code can be moved from where is was convenient for passing a test to where it more logically belongs. Duplication code must be removed.
This phase is &lt;strong&gt;REFACTOR&lt;/strong&gt; phase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And the wheel continues to roll. Starting to another new test.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, code that doesn't get refactored as a system works by hopes. Pray to system work.&lt;/p&gt;

&lt;p&gt;There are specific and general guidelines for refactoring and for creating clean code that all developers must to know.&lt;/p&gt;

&lt;p&gt;So where that guidelines? How can I improve my code?&lt;/p&gt;

&lt;h3 id="where"&gt;Where?&lt;/h3&gt;

&lt;p&gt;Before start to learning anything either new language or new framework, let's start to learn a process of how to think through problems.
Don't only good for learning but none of the good coding practices.&lt;/p&gt;

&lt;p&gt;There are design patterns that help decouple and remove most of the heavy query method usage, such as
Tell Don’t Ask, Eastward Oriented Code, and Monads.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: I will write blog posts about three this concepts soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Learning to apply patterns such as these will help relieve you of many of the headaches you experienced as a new programmer.&lt;/p&gt;

&lt;h3 id="rails"&gt;Rails&lt;/h3&gt;

&lt;p&gt;By design, Rails has a way to organize data and behavior into specific areas to help maintanability and functionality.&lt;/p&gt;

&lt;p&gt;The Rails's code may be implemented something like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model: data store, organize data for presentation&lt;/li&gt;
  &lt;li&gt;Controller: selecting data for presentation and rendering the view&lt;/li&gt;
  &lt;li&gt;View: the layout with lots of conditional logic based on the user data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, Model and View are both doing more than they should - They are not following the SRP (Single Responsibility Principle).
The model should not be reponsible data for presentation and the view should not contain conditional logic for how it's rendered.&lt;/p&gt;

&lt;p&gt;So, the new way should like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model: data store&lt;/li&gt;
  &lt;li&gt;Controller: selecting data and wrap in presenter and render view&lt;/li&gt;
  &lt;li&gt;Presenter: organize model data for presentation (no HTML)&lt;/li&gt;
  &lt;li&gt;Helper: Conditional view logic will be re-used.&lt;/li&gt;
  &lt;li&gt;View: the layout with simple method calls directly on presenter objects and any helpers.&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>How to read an understand the books or papers</title>
    <link rel="alternate" href="http://vincent.com/2017/04/03/how-to-read-and-understand-books-paper/"/>
    <id>http://vincent.com/2017/04/03/how-to-read-and-understand-books-paper/</id>
    <published>2017-04-03T09:38:00+08:00</published>
    <updated>2017-04-03T10:35:23+08:00</updated>
    <author>
      <name>Vincent</name>
    </author>
    <summary type="html">&lt;p&gt;Reading books is my hobby. Normally I have few problems when reading science or programming's books. Some books are quite hard to read and understand.
The big reason is I don't know the right way to read. Luckily I found an article &lt;a href="https://violentmetaphors.com/2013/08/25/how-to-read-and-understand-a-scientific-paper-2/"&gt;sharing tips&lt;/a&gt;
to...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Reading books is my hobby. Normally I have few problems when reading science or programming's books. Some books are quite hard to read and understand.
The big reason is I don't know the right way to read. Luckily I found an article &lt;a href="https://violentmetaphors.com/2013/08/25/how-to-read-and-understand-a-scientific-paper-2/"&gt;sharing tips&lt;/a&gt;
to reading a books. So, I wrote this post to remind me: should follow twelve tips in the article to read books efficiently.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write down EVERY single word that you don't understand. Have to look them all up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reading the introduction and abstract (if have). The article's author say don't read the abstract, but in my opinion, we should read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identify the BIG QUESTION, this helps you focus why this research is being done.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SUMMARIZE the background in five sentences or less.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identify the SPECIFIC QUESTIONS. What exactly are the authors trying to answer with their research? There maybe multiple questions or just one. Write them down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identify the approach. What are the authors going to do the answer the SPECIFIC QUESTIONS?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now read the methods section. Draw a diagram for each experiment, showing exactly what the authors did.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read the results section. Write one or more paragraphs to summarize for each experiment, each figure, each table. Don't yet try to decide what
the results mean, just write down what they are.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do the results answer the SPECIFIC QUESTIONS? What do you think they mean?&lt;/p&gt;

    &lt;p&gt;Don't move on until you have thought about this. In my opinion, I think we have to understand (full or a bit) before go to next section.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read the conclusion/discusstion section.&lt;/p&gt;

    &lt;p&gt;What do the authors think the results mean? Do you agree with them? Can you come up with any alternative way?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, go back to the beginning and read the abstract again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final step: What do others researchers say about this book?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Elixir Learning Part 2</title>
    <link rel="alternate" href="http://vincent.com/2017/03/28/elixir-learning-part-2/"/>
    <id>http://vincent.com/2017/03/28/elixir-learning-part-2/</id>
    <published>2017-03-28T22:18:00+08:00</published>
    <updated>2017-03-29T23:05:59+08:00</updated>
    <author>
      <name>Vincent</name>
    </author>
    <summary type="html">&lt;h3 id="import-and-alias"&gt;Import and Alias&lt;/h3&gt;

&lt;p&gt;To call a function from another module, you have to reference the module name, sometime this can be cumbersome. If your module often calls functions
from another module, let's use &lt;code&gt;import&lt;/code&gt; other module into your own.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    defmodule...&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;h3 id="import-and-alias"&gt;Import and Alias&lt;/h3&gt;

&lt;p&gt;To call a function from another module, you have to reference the module name, sometime this can be cumbersome. If your module often calls functions
from another module, let's use &lt;code&gt;import&lt;/code&gt; other module into your own.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    defmodule User do
    import IO

    def name do
      puts "Vincent"
    end
  end

  User.name # Hello Vincent
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You can import multiple modules.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An alternative to import is &lt;code&gt;alias&lt;/code&gt; to reference a module under a different name&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    defmodule User do
    alias IO, as: Alien

    def name do
      Alien.put "Vincent"
    end
  end

  User.name # "Vincent"
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Alias will useful if a module has a long name.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="module-attributes"&gt;Module attributes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Module attributes can be used as compile-time &lt;code&gt;constants&lt;/code&gt;. The constant exists only during the compilation of the module.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    # circle.ex
    defmodule Circle do
    @pi 3.14159

    def area(r) do
      r*r*@pi
    end
  end

  Circle.area(4) # 4 * 4 * 3.14159 = 50.26544
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate a compiled file by command: &lt;code&gt;elixirc circle.ex&lt;/code&gt;, then start &lt;code&gt;iex&lt;/code&gt; shell from the same folder. From &lt;code&gt;iex&lt;/code&gt; shell, call &lt;code&gt;Circle.area(4)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="atom"&gt;Atom&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Atoms are literal named constants. Similar to symbols in Ruby, for example: &lt;code&gt;:an_atom&lt;/code&gt;, &lt;code&gt;:user_name&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another syntax for Atom constants start with uppercase: &lt;code&gt;Abcd&lt;/code&gt;. This is called an &lt;code&gt;alias&lt;/code&gt;. When you use an alias, the complier implicitly addes the &lt;code&gt;Elixir&lt;/code&gt; as a prefix. &lt;code&gt;Abcd == Elixir.Abcd&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One important thing, Elixir doesn't have a dedicated boolean type - &lt;code&gt;:true == true&lt;/code&gt;. This mean a boolean is just an atom that has value of true or false.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another special thing is &lt;code&gt;nil&lt;/code&gt;. Nil is also an atom - &lt;code&gt;nil == :nil&lt;/code&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    nil || false || 3 # 3
    nil || true # true
    3 || nil # 3

    3 &amp;amp;&amp;amp; nil # nil
    nil &amp;amp;&amp;amp; 3 # nil
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="tuples"&gt;Tuples&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Tuples are used to group a small, fixed number of elements together.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    user = { "Vincent", 27, "Software Developer" }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="list"&gt;List&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;List are used to manage dynamic, variable-sized collections of data.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    user = [1,2,3,4,5, "Vincent"]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The complexity of operations on list have an O(n).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; You should avoid adding elements to the end of a list. The reason in below section&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="recursive-list-definition"&gt;Recursive list definition&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;An alternative way of looking at lists is to think of them as recursive structures. A list can be represented by a pair (&lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;), where &lt;code&gt;head&lt;/code&gt;
is the first element of the list and &lt;code&gt;tail&lt;/code&gt; points to the pair of remaining elements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is special syntax to support recursive list definition.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  a_list = [head | tail]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So for example we have a list &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; then the construct can be write:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  a_list = [1 | [2 | [3 | [4 | [5 | []]]]]]
  # [1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;That's why we SHOULD NOT add elements to the end of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code&gt;hd&lt;/code&gt; to get the head of a list and &lt;code&gt;tl&lt;/code&gt; to get the tail of a list.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    list = [1,2,3,4]
  hd(list) # 1
  tl(list) # [2,3,4]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [a | b] = list
      a # 1
      b # [2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How we push new element to the top of the list&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    list = [1,2,3,4]
  new_list = [0 | list]
  # [0,1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data in Elixir is immutable and you can't do an in-memory modification of a value.&lt;/li&gt;
  &lt;li&gt;You need to store its result to another variable or rebound.&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
</feed>
